{"version":3,"file":"index.mjs","sources":["../src/helper/constants.ts","../src/index.ts","../src/helper/index.ts"],"sourcesContent":["export const badgeHashs = {\n  buildFile: './.buildstatus',\n  getBuildUrl: (left: string, right: string, color: string): string =>\n    `https://img.shields.io/badge/${left}-${right}-${color}.svg`,\n  getCoverageUrl: (coverage: number, color: string): string =>\n    `https://img.shields.io/badge/Coverage-${coverage}${encodeURI('%')}-${color}.svg`,\n  hashes: {\n    build: 'buildstatus',\n    jest: ['branches', 'functions', 'lines', 'statements'],\n  },\n  jsonCoverageFile: './coverage/coverage-summary.json',\n  readmeFile: './README.md',\n  readmeTemplateFile: './README-template.md',\n};\n","#!/usr/bin/env node\n\nimport Creator from './helper';\n\nconst creator = new Creator();\n\nif (creator.createReadme()) {\n  creator.insertBadges();\n  //   console.log(\n  //     `\n  //     ██╗███████╗███████╗████████╗    ██████╗  █████╗ ██████╗  ██████╗ ███████╗███████╗    ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗\n  //     ██║██╔════╝██╔════╝╚══██╔══╝    ██╔══██╗██╔══██╗██╔══██╗██╔════╝ ██╔════╝██╔════╝    ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝\n  //     ██║█████╗  ███████╗   ██║       ██████╔╝███████║██║  ██║██║  ███╗█████╗  ███████╗    ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗\n  // ██  ██║██╔══╝  ╚════██║   ██║       ██╔══██╗██╔══██║██║  ██║██║   ██║██╔══╝  ╚════██║    ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝\n  // ╚█████╔███████╗███████║   ██║       ██████╔╝██║  ██║██████╔╝╚██████╔╝███████╗███████║    ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗\n  // ╚════╝ ╚══════╝╚══════╝   ╚═╝       ╚═════╝ ╚═╝  ╚═╝╚═════╝  ╚═════╝ ╚══════╝╚══════╝    ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝\n  //     `\n  //   );\n}\n","import * as fs from 'fs';\n\nimport { badgeHashs } from './constants';\nimport { IReport } from './interface';\n\nconst readmeFile: string = badgeHashs.readmeFile;\nconst readmeTemplateFile: string = badgeHashs.readmeTemplateFile;\n\nexport default class Helper {\n  private reportKeys: string[] = badgeHashs.hashes.jest;\n\n  public createReadme = (path: string = readmeTemplateFile): boolean => {\n    if (fs.existsSync(path)) {\n      fs.copyFileSync(path, readmeFile);\n      console.log('\\x1b[1m\\x1b[32m', `Template read succesfully. ${readmeFile} created!`);\n      return true;\n    } else {\n      console.log('\\x1b[1m\\x1b[31m', `Error: ${readmeTemplateFile} file not not found.`);\n      console.log('\\x1b[1m\\x1b[32m', `You must have a ${readmeTemplateFile} created. Please read the documentation.`);\n      return false;\n    }\n  };\n\n  public insertBadges = (path: string = badgeHashs.jsonCoverageFile): boolean => {\n    let returnValue: boolean = false;\n    const coveragePath = this.getCoveragePath(path);\n    if (fs.existsSync(coveragePath)) {\n      const coverageFile = fs.readFileSync(coveragePath, 'utf8');\n      if (!coverageFile.length) {\n        console.log('\\x1b[1m\\x1b[31m', 'Malformed coverage report. Please run Jest again');\n        return false;\n      }\n      console.log('\\x1b[1m\\x1b[32m', `Reading coverage file from ${coveragePath}`);\n      const report: IReport = JSON.parse(coverageFile);\n      let readmeFileData: string = fs.readFileSync(readmeFile, 'utf8');\n      this.reportKeys.forEach(key => {\n        const url: string = this.getBadge(report, key);\n        if (url.length) {\n          const pattern: string = '#' + key + '#';\n          readmeFileData = readmeFileData.replace(pattern, url);\n          console.log('\\x1b[1m\\x1b[32m', 'Badge for', key, 'updated with:', url);\n          returnValue = true;\n          fs.writeFileSync(readmeFile, readmeFileData, 'utf8');\n        } else {\n          returnValue = false;\n        }\n      });\n      this.getBuildStatus();\n    } else {\n      console.log('\\x1b[1m\\x1b[31m', 'Error: ' + coveragePath + ' file not found. Is it at the default location?');\n      console.log(\n        '\\x1b[1m\\x1b[33m',\n        'Do you have Jest installed? If so, is it properly configured? If you do, then run me',\n      );\n      console.log(\n        '\\x1b[1m\\x1b[33m',\n        \"by passing args i.e. npm run jest-badges-readme --coverageDir='my-custom-coverage-folder'\",\n      );\n      returnValue = false;\n    }\n    return returnValue;\n  };\n\n  public getBuildStatus = (path: string = badgeHashs.buildFile): boolean => {\n    let url: string = badgeHashs.getBuildUrl('Build', 'Passing', 'brightgreen');\n    let returnValue: boolean = false;\n    const pattern: string = `#${badgeHashs.hashes.build}#`;\n    if (fs.existsSync(path)) {\n      let readmeFileData = fs.readFileSync(readmeFile, 'utf8');\n      const buildStatus = fs.readFileSync(path, 'utf8');\n      if (buildStatus === 'ok') {\n        url = badgeHashs.getBuildUrl('Build', 'Passing', 'brightgreen');\n        returnValue = true;\n      } else if (buildStatus === 'nok') {\n        url = badgeHashs.getBuildUrl('Build', 'Failing', 'brightred');\n        returnValue = false;\n      }\n      readmeFileData = readmeFileData.replace(pattern, url);\n      fs.writeFileSync(readmeFile, readmeFileData, 'utf8');\n      console.log('\\x1b[1m\\x1b[32m', 'Writing building status', buildStatus, 'with URL:', url);\n    } else {\n      returnValue = false;\n    }\n    return returnValue;\n  };\n\n  private getCoveragePath = (path: string): string => {\n    let coveragePath: string = path;\n    let argPath: string = '';\n    const args = process.argv\n      .filter(item => {\n        if (item.indexOf('coverage') >= 0) {\n          return item;\n        }\n      })\n      .toString();\n\n    if (args) {\n      argPath = args.replace('--coverageDir=', '');\n    }\n\n    if (argPath && args.length > 0) {\n      coveragePath = `${argPath}/coverage-summary.json`;\n    }\n\n    return coveragePath;\n  };\n\n  private getBadge = (report: IReport, key: string): string => {\n    if (!(report && report.total && report.total[key])) {\n      console.log('\\x1b[1m\\x1b[31m', 'Malformed coverage report for the key ' + key + '. Please run Jest again.');\n      return '';\n    }\n    const coverage: number = report.total[key].pct;\n    const color = this.getColor(coverage);\n    return badgeHashs.getCoverageUrl(coverage, color);\n  };\n\n  private getColor = (coverage: number): string => {\n    if (coverage < 80) {\n      return 'red';\n    }\n    if (coverage < 90) {\n      return 'yellow';\n    }\n    return 'brightgreen';\n  };\n}\n"],"names":["const","badgeHashs","left","right","color","creator","constructor","path","fs","log","returnValue","coveragePath","this","getCoveragePath","coverageFile","length","report","JSON","parse","readmeFileData","reportKeys","forEach","key","url","getBadge","replace","console","getBuildStatus","buildStatus","argPath","args","process","argv","filter","item","indexOf","toString","total","coverage","pct","encodeURI","getColor","createReadme","insertBadges"],"mappings":";uFAAOA,IAAMC,WAEGC,EAAcC,EAAeC,yCACTF,MAAQC,MAASC,UAHxCH,EAQH,CAAC,WAAY,YAAa,QAAS,cCJvCI,EAAU,ICIhBC,sCACiCL,6BAERM,yBFCH,wBEAdC,EAAcD,MACAA,EFFR,uBEGAE,IAAI,gEACL,YAECA,IAAI,uEACJA,IAAI,6FACL,+BAIYF,kBFbL,wCEcZG,GAAuB,EACrBC,EAAeC,EAAKC,gBAAgBN,MACtCC,EAAcG,GAAe,KACzBG,EAAeN,EAAgBG,EAAc,YAC9CG,EAAaC,sBACRN,IAAI,YAAmB,qDACxB,UAEDA,IAAI,0CAAiDE,OACvDK,EAAkBC,KAAKC,MAAMJ,GAC/BK,EAAyBX,EFvBrB,cEuBiD,UACpDY,WAAWC,iBAAQC,OAChBC,EAAcX,EAAKY,SAASR,EAAQM,GACtCC,EAAIR,UAEWI,EAAeM,QADR,IAAMH,EAAM,IACaC,GACjDG,QAAQjB,IAAI,YAAmB,YAAaa,EAAK,gBAAiBC,MACpD,IF9BV,cE+ByBJ,EAAgB,YAE/B,MAGbQ,sBAELD,QAAQjB,IAAI,YAAmB,UAAYE,EAAe,2DAClDF,IACN,YACA,gGAEMA,IACN,YACA,gGAEY,SAETC,gCAGgBH,kBF9Dd,sBE+DLgB,EAActB,EAAuB,QAAS,UAAW,eACzDS,GAAuB,KAEvBF,EAAcD,GAAO,KACnBY,EAAiBX,EFzDb,cEyDyC,QAC3CoB,EAAcpB,EAAgBD,EAAM,QACtB,OAAhBqB,GACFL,EAAMtB,EAAuB,QAAS,UAAW,kBACnC,GACW,QAAhB2B,IACTL,EAAMtB,EAAuB,QAAS,UAAW,gBACnC,KAECkB,EAAeM,wBAAiBF,KFlEzC,cEmEqBJ,EAAgB,QAC7CO,QAAQjB,IAAI,YAAmB,0BAA2BmB,EAAa,YAAaL,WAEtE,SAETb,iCAGkBH,OACrBI,EAAuBJ,EACvBsB,EAAkB,GAChBC,EAAOC,QAAQC,KAClBC,gBAAOC,MACFA,EAAKC,QAAQ,aAAe,SACvBD,IAGVE,kBAECN,MACQA,EAAKL,QAAQ,iBAAkB,KAGvCI,GAAWC,EAAKf,OAAS,IAC3BJ,8BAGKA,0BAGWK,EAAiBM,QAC7BN,GAAUA,EAAOqB,OAASrB,EAAOqB,MAAMf,WAC3CI,QAAQjB,IAAI,YAAmB,yCAA2Ca,EAAM,4BACzE,OAEHgB,EAAmBtB,EAAOqB,MAAMf,GAAKiB,oBF7G5BD,EAAkBlC,kDACQkC,EAAWE,UAAU,SAAQpC,SE8G/DH,CAA0BqC,EADnB1B,EAAK6B,SAASH,4BAIVA,UACdA,EAAW,GACN,MAELA,EAAW,GACN,SAEF,gBDvHPjC,EAAQqC,gBACVrC,EAAQsC"}